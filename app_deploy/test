# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::Config.run do |config|
  config.vm.define :dev do |dev_config|
	  # All Vagrant configuration is done here. The most common configuration
	  # options are documented and commented below. For a complete reference,
	  # please see the online documentation at vagrantup.com.
	
	  # Every Vagrant virtual environment requires a box to build off of.
	  dev_config.vm.box = "precise32"
	  dev_config.vm.box_url = "http://files.vagrantup.com/precise32.box"
	
	  # Boot with a GUI so you can see the screen. (Default is headless)
	  # dev_config.vm.boot_mode = :gui
	
	  # Assign this VM to a host-only network IP, allowing you to access it
	  # via the IP. Host-only networks can talk to the host machine as well as
	  # any other machines on the same network, but cannot be accessed (through this
	  # network interface) by any external networks.
	  dev_config.vm.network :hostonly, "192.168.33.11"
	
	  # Assign this VM to a bridged network, allowing you to connect directly to a
	  # network using the host's network device. This makes the VM appear as another
	  # physical device on your network.
	  # dev_config.vm.network :bridged
	
	  # Forward a port from the guest to the host, which allows for outside
	  # computers to access the VM, whereas host only networking does not.
	  dev_config.vm.forward_port 80, 8080
	
	  # Share an additional folder to the guest VM. The first argument is
	  # an identifier, the second is the path on the guest to mount the
	  # folder, and the third is the path on the host to the actual folder.
	  dev_config.vm.share_folder("htdocs", "/var/www/", "/Users/chasevecchio/Sites/", :nfs => true)
	
	  # Enable provisioning with chef solo, specifying a cookbooks path, roles
	  # path, and data_bags path (all relative to this Vagrantfile), and adding 
	  # some recipes and/or roles.
	  #
	  dev_config.vm.provision :chef_solo do |chef|
	    chef.cookbooks_path = "chef/cookbooks"
	    chef.roles_path = "chef/roles"
	    chef.data_bags_path = "chef/data_bags"
	
		chef.add_recipe "apt"
		chef.add_recipe "build-essential"
		chef.add_recipe "apache2"
		chef.add_recipe "mysql::client"
		chef.add_recipe "php"
		chef.add_recipe "php::module_mysql"
		#chef.add_recipe "php::module_memcache"
		chef.add_recipe "php::module_apc"
		chef.add_recipe "php::module_curl"
		chef.add_recipe "php::module_mcrypt"
		chef.add_recipe "apache2::mod_php5"
		chef.add_recipe "apache2::mod_rewrite"
		chef.add_recipe "ubuntu"
		chef.add_recipe "app_deploy"
	
		chef.json = {
			:apache => {
				:user => "www-data",
				:group => "www-data"
			},
			:web_app => {
				:svn_url => "https://zerofractal.slsapp.com/source/gold-cup-server/trunk",
				:svn_user => "chase.vecchio@zerofractal.com",
				:svn_pass => "467c4tnga67",
				:svn_svr_dest => "/var/www/testsvn/appdeploy/"
			}
		}
	  end
  end
  config.vm.define :test do |test_config|
	  # All Vagrant configuration is done here. The most common configuration
	  # options are documented and commented below. For a complete reference,
	  # please see the online documentation at vagrantup.com.
	
	  # Every Vagrant virtual environment requires a box to build off of.
	  test_config.vm.box = "precise32"
	  test_config.vm.box_url = "http://files.vagrantup.com/precise32.box"
	
	  # Boot with a GUI so you can see the screen. (Default is headless)
	  # test_config.vm.boot_mode = :gui
	
	  # Assign this VM to a host-only network IP, allowing you to access it
	  # via the IP. Host-only networks can talk to the host machine as well as
	  # any other machines on the same network, but cannot be accessed (through this
	  # network interface) by any external networks.
	  test_config.vm.network :hostonly, "192.168.33.10"
	
	  # Assign this VM to a bridged network, allowing you to connect directly to a
	  # network using the host's network device. This makes the VM appear as another
	  # physical device on your network.
	  # test_config.vm.network :bridged
	
	  # Forward a port from the guest to the host, which allows for outside
	  # computers to access the VM, whereas host only networking does not.
	  test_config.vm.forward_port 80, 8888
	
	  # Share an additional folder to the guest VM. The first argument is
	  # an identifier, the second is the path on the guest to mount the
	  # folder, and the third is the path on the host to the actual folder.
	  test_config.vm.share_folder("htdocs", "/var/www/", "/Users/chasevecchio/Sites/", :nfs => true)
	
	  # Enable provisioning with chef solo, specifying a cookbooks path, roles
	  # path, and data_bags path (all relative to this Vagrantfile), and adding 
	  # some recipes and/or roles.
	  #
	  test_config.vm.provision :chef_solo do |chef|
	    chef.cookbooks_path = "chef/cookbooks"
	    chef.roles_path = "chef/roles"
	    chef.data_bags_path = "chef/data_bags"
	
		chef.add_recipe "apt"
		chef.add_recipe "build-essential"
		chef.add_recipe "apache2"
		chef.add_recipe "mysql::client"
		chef.add_recipe "php"
		chef.add_recipe "php::module_mysql"
		#chef.add_recipe "php::module_memcache"
		chef.add_recipe "php::module_apc"
		chef.add_recipe "php::module_curl"
		chef.add_recipe "php::module_mcrypt"
		chef.add_recipe "apache2::mod_php5"
		chef.add_recipe "apache2::mod_rewrite"
		chef.add_recipe "ubuntu"
		chef.add_recipe "app_deploy"
	
		chef.json = {
			:apache => {
				:user => "vagrant",
				:group => "vagrant"
			}
		}
	  end
  end
end